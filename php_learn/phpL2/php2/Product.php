<?php


namespace Nom;


abstract class Product
{
    const MARG_PERSENT = 13;

    abstract public function totalPrice();

    abstract public function totalMarg();
}

class DigitalProduct extends Product
{
    const PRICE = 200;
    private $count;

    public function __construct($count)
    {
        self::SetCount($count);
    }


    public function getPrice()
    {
        return self::PRICE;
    }

    /**
     * @return mixed
     */
    public function getCount()
    {
        return $this->count;
    }

    /**
     * @param mixed $count
     */
    public function setCount($count): void
    {
        $this->count = $count;
    }

    public function totalPrice()
    {
        // TODO: Implement totalPrice() method.
        return self::PRICE * self::getCount();
    }

    public function totalMarg()
    {
        // TODO: Implement totalMarg() method.
        return self::totalPrice() / 100 * parent::MARG_PERSENT;
    }
}

class PhysicalProduct extends DigitalProduct
{


    public function getPrice()
    {
        return parent::getPrice() * 2; // TODO: Change the autogenerated stub
    }

    public function totalPrice()
    {
        return self::getPrice() * parent::getCount(); // TODO: Change the autogenerated stub
    }

    public function totalMarg()
    {
        return self::totalPrice() / 100 * parent::MARG_PERSENT; // TODO: Change the autogenerated stub
    }

}

class WeightProduct extends Product {
    private $weight;
    private $price;// будем считать что цена за одну номинальную единицу веса

    /**
     * @return mixed
     */
    public function getPrice()
    {
        return $this->price;
    }

    /**
     * @param mixed $price
     */
    public function setPrice($price): void
    {
        $this->price = $price;
    }

    /**
     * @return mixed
     */
    public function getWeight()
    {
        return $this->weight;
    }

    /**
     * @param mixed $weight
     */
    public function setWeight($weight): void
    {
        $this->weight = $weight;
    }

    public function totalPrice()
    {
        // TODO: Implement totalPrice() method.
        return self::getWeight() * self::getPrice();
    }

    public function totalMarg()
    {
        // TODO: Implement totalMarg() method.
        return self::totalPrice() / 100 * parent::MARG_PERSENT;
    }

}